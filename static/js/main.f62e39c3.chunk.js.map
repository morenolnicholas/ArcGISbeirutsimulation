{"version":3,"sources":["components/WebMapView/WebMapView.js","components/InputCoordinates/InputCoordinates.js","components/DistanceButtons/DistanceButtons.js","components/NavBar/NavBar.js","App.js","registerServiceWorker.js","index.js"],"names":["WebMapView","props","mapRef","useRef","useEffect","loadModules","css","then","_ref","_ref2","Object","slicedToArray","ArcGISMap","MapView","Graphic","Circle","map","basemap","view","container","current","center","fullCoordinates","longitude","latitude","zoom","simpleFillSymbol","type","color","outline","width","outerGraphic","geometry","radiusUnit","radius","symbol","middleGraphic","innerGraphic","isOuterCircle","graphics","add","isMiddleCircle","isInnerCircle","react_default","a","createElement","className","ref","InputCoordinates","_useForm","useForm","register","handleSubmit","Card_default","Card","Form_default","onSubmit","data","setCoordinates","Number","longCoor","latCoor","Form","TextField_default","fullWidth","name","Button_default","clear","DistanceButtons","onClick","isOuterCircleMethod","isMiddleCircleMethod","isInnerCircleMethod","NavBar","_useState","useState","_useState2","openInfoModal","setOpenInfoModal","_useState3","_useState4","openUpdatesModal","setOpenUpdatesModal","docsModalZIndex","zIndex","Modal_default","open","onRequestClose","appElement","document","body","overlayStyle","title","Elements","SubNav_default","legacy","blue","SubNav","active","href","App","coordinates","outerCircle","setOuterCircle","_useState5","_useState6","middleCircle","setMiddleCircle","_useState7","_useState8","innerCircle","setInnerCircle","components_NavBar_NavBar","Container","components_WebMapView_WebMapView","Row","Col","md","components_InputCoordinates_InputCoordinates","prevCoordinates","components_DistanceButtons_DistanceButtons","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","setDefaultOptions","ReactDOM","render","CalciteThemeProvider_default","src_App_0","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f62e39c3.chunk.js","sourcesContent":["import React, { useEffect, useRef} from 'react';\r\nimport { loadModules } from 'esri-loader';\r\nimport \"./WebMapView.css\";\r\n\r\nexport const WebMapView = (props) => {\r\n\r\n  const mapRef = useRef();\r\n\r\n  \r\n  //Creating the map itself, should only be effected when center is changed. \r\n  useEffect(\r\n    () => {\r\n      \r\n      // lazy load the required ArcGIS API for JavaScript modules and CSS\r\n      loadModules(['esri/Map', 'esri/views/MapView', \"esri/Graphic\", \"esri/geometry/Circle\",\r\n      \"esri/layers/GraphicsLayer\"], { css: true })\r\n        .then(([ArcGISMap, MapView, Graphic, Circle,GraphicsLayer]) => {\r\n          const map = new ArcGISMap({\r\n            basemap: 'topo'\r\n          });\r\n           // load the map view at the ref's DOM node\r\n           const view = new MapView({\r\n            container: mapRef.current,\r\n            map: map,\r\n            center: [props.fullCoordinates.longitude, props.fullCoordinates.latitude],\r\n            zoom: 11\r\n          });\r\n\r\n\r\n  \r\n          //Creating the fill for the circle\r\n          var simpleFillSymbol = {\r\n            type: \"simple-fill\",\r\n            color: [253, 171, 159, 0.3], // salmon, opacity of 80%\r\n            outline: {\r\n              color: [0, 0, 0, 0.2],\r\n              width: 1\r\n            }\r\n          };\r\n  \r\n          //First circle\r\n          var circleOuter = new Circle({\r\n            center: [props.fullCoordinates.longitude, props.fullCoordinates.latitude],\r\n            type: \"polygon\",\r\n            radiusUnit: \"kilometers\",\r\n            radius: 9\r\n          });\r\n  \r\n          var outerGraphic = new Graphic({\r\n            geometry: circleOuter,\r\n            symbol: simpleFillSymbol\r\n          });\r\n  \r\n          //Middle circle of the explosion\r\n          var circleMiddle = new Circle({\r\n            center: [props.fullCoordinates.longitude, props.fullCoordinates.latitude],\r\n            type: \"polygon\",\r\n            radiusUnit: \"kilometers\",\r\n            radius: 5\r\n          });\r\n  \r\n          var middleGraphic = new Graphic({\r\n            geometry: circleMiddle,\r\n            symbol: simpleFillSymbol\r\n          });\r\n  \r\n          var circleInner = new Circle({\r\n            center: [props.fullCoordinates.longitude, props.fullCoordinates.latitude],\r\n            type: \"polygon\",\r\n            radiusUnit: \"kilometers\",\r\n            radius: 3.2\r\n          });\r\n  \r\n          var innerGraphic = new Graphic({\r\n            geometry: circleInner,\r\n            symbol: simpleFillSymbol\r\n          });\r\n\r\n          //ok logic, could be better.\r\n          \r\n          //Insert bad logic here, gotta fix later\r\n          if(props.isOuterCircle === true){\r\n            view.graphics.add(outerGraphic);\r\n          } \r\n          if(props.isMiddleCircle === true){\r\n            view.graphics.add(middleGraphic);\r\n          }\r\n          if(props.isInnerCircle === true){\r\n            view.graphics.add(innerGraphic);\r\n          }\r\n\r\n          return () => {\r\n            if (view) {\r\n              // destroy the map view\r\n              view.container = null;\r\n            }\r\n          }\r\n          \r\n        });\r\n    }, [props.fullCoordinates, props.isOuterCircle, props.isMiddleCircle, props.isInnerCircle],\r\n  );\r\n\r\n  \r\n\r\n  \r\n  return (\r\n    <div className=\"WebMapView\" >\r\n      <div className=\"webmap\" ref={mapRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WebMapView;","import React from 'react';\r\nimport {useForm} from \"react-hook-form/dist/index.ie11\";\r\nimport \"./InputCoordinates.css\";\r\nimport Button from 'calcite-react/Button';\r\nimport TextField from 'calcite-react/TextField';\r\nimport Form, {\r\n  FormControl,\r\n  FormControlLabel,\r\n  } from 'calcite-react/Form';\r\n  import Card, {\r\n    CardTitle,\r\n    CardContent,\r\n  } from 'calcite-react/Card';\r\n\r\n\r\n\r\n//Used the useFormHook - Look at this site for reference\r\n//https://react-hook-form.com/\r\nconst InputCoordinates = (props) => {\r\n\r\n  //Form-hook, allows us to retrieve the information from the form\r\n  const { register, handleSubmit } = useForm();\r\n  const onSubmit = data =>{\r\n    //retrieving the props functions to push information to the WebMapView file\r\n    props.setCoordinates(Number(data.longCoor), Number(data.latCoor));\r\n  } \r\n\r\nreturn (\r\n<div className=\"InputCoordinates\">\r\n  {/* Form to retrieve the input of the coordinates. \r\n      when button is clicked, it sends the ref info\r\n      to the onSumbit function. */}\r\n\r\n\r\n<Card >\r\n  <CardContent>\r\n    <CardTitle>Coordinates</CardTitle>\r\n    <p>\r\n      Enter the Longitude and Latitude of the area you are interested in viewing with. \r\n     \r\n    </p>\r\n\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      \r\n      <FormControl>\r\n        <FormControlLabel>Longitude</FormControlLabel>\r\n          <TextField fullWidth name=\"longCoor\" ref={register} />\r\n        </FormControl>\r\n\r\n        <FormControl>\r\n        <FormControlLabel>Latitude</FormControlLabel>\r\n          <TextField fullWidth name=\"latCoor\" ref={register} />\r\n        </FormControl>\r\n        \r\n        <Button clear type = \"submit\">\r\n           Submit Coordinate\r\n        </Button>\r\n    </Form>\r\n\r\n  </CardContent>\r\n</Card>\r\n\r\n   \r\n\r\n</div>\r\n  );\r\n}\r\n\r\nexport default InputCoordinates;\r\n","import React from 'react';\r\nimport Button from 'calcite-react/Button';\r\nimport './DistanceButtons.css'\r\nimport Card, {\r\n  CardTitle,\r\n  CardContent,\r\n} from 'calcite-react/Card';\r\n\r\n\r\nimport \"./DistanceButtons.css\";\r\n\r\n\r\nconst DistanceButtons = (props) => {\r\n\r\n\r\nreturn (\r\n<div className=\"DistanceButtons\">\r\n\r\n<Card>\r\n  <CardContent className = \"distanceButtonsCardHeight\">\r\n    <CardTitle>Select Distance Buttons</CardTitle>\r\n    <p>\r\n      The Distance Buttons allows a user to choose which explosion raidus is to be shown or not shown at all.\r\n      If a specific button is pressed, the map will rerender and the radius will be shown / not shown. {' '}\r\n      \r\n    </p>\r\n\r\n    <div className = \"buttonGroup\">\r\n    <Button clear fullWidth\r\n    onClick={props.isOuterCircleMethod}>\r\n    9 Kilometer\r\n  </Button>\r\n\r\n  <Button clear fullWidth\r\n  onClick={props.isMiddleCircleMethod}>\r\n    5 Kilometer\r\n  </Button>\r\n  <Button clear fullWidth\r\n  onClick={props.isInnerCircleMethod}>\r\n    3.2 Kilometer\r\n  </Button>\r\n\r\n  </div>\r\n  </CardContent>\r\n</Card>\r\n\r\n\r\n</div>\r\n  );\r\n}\r\n\r\nexport default DistanceButtons;\r\n","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n//import calcite library style sheets\r\nimport Modal from 'calcite-react/Modal'\r\nimport { CalciteP, CalciteLi } from 'calcite-react/Elements';\r\n\r\nimport SubNav, {\r\n    SubNavTitle,\r\n    SubNavList,\r\n    SubNavLink,\r\n} from 'calcite-react/SubNav';\r\n\r\nconst NavBar = (props) => {\r\n\r\n    //creating modals for the nav bar\r\n    const [openInfoModal, setOpenInfoModal] = useState(false);\r\n    const [openUpdatesModal, setOpenUpdatesModal] = useState(false);\r\n\r\n\r\n    const noViewInfoModalHandler = () => {\r\n        setOpenInfoModal(false);\r\n    }\r\n\r\n    const viewInfoModalHandler = () => {\r\n        setOpenInfoModal(true);\r\n    }\r\n\r\n\r\n    const noViewUpdatesModalHandler = () => {\r\n        setOpenUpdatesModal(false);\r\n    }\r\n\r\n    const viewUpdatesModalHandler = () => {\r\n        setOpenUpdatesModal(true);\r\n    }\r\n\r\n    const docsModalZIndex = { zIndex: 1001 }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"NavBar\">\r\n\r\n\r\n            <Modal\r\n                open={openInfoModal}\r\n                onRequestClose={noViewInfoModalHandler}\r\n                appElement={document.body}\r\n                overlayStyle={docsModalZIndex}\r\n                title=\"What is this?\"\r\n\r\n\r\n            >\r\n\r\n                <CalciteP>\r\n                    \"On 4 August 2020, a large amount of ammonium nitrate stored at the port of the city of Beirut,\r\n                    the capital of Lebanon, exploded, causing at least 200 deaths, 3 reported missing, 6,500 injuries,\r\n                    US$10–15 billion in property damage, and leaving an estimated 300,000 people homeless. Around 2,750 tonnes of\r\n                    the substance (equivalent to around 1.1 kilotons of TNT) had been stored in a warehouse without proper safety measures for\r\n                    the previous six years, after having been confiscated by the Lebanese authorities from the abandoned ship MV Rhosus.\r\n                    The explosion was preceded by a fire in the same warehouse, but as of September 2020, the exact cause of the detonation is still under investigation. \"\r\n</CalciteP>\r\n                <CalciteP>\r\n                    Reading about this devasting explosion, I was curious to know how it affected the locals around the area.\r\n                    The number of videos I watched about how it affected people and the result of the explosion, I was shocked by what happened.\r\n                    I was curious to know what it would look like if that happened to my area. Since I started learning React.js and the ArcGIS API, I knew this would be a great concept to develop.\r\n    </CalciteP>\r\n                <CalciteP>\r\n                    The purpose of this application is to emulate the explosion radius from Beirut and let a user see what it would like with their area of interest.\r\n                    I hope that this will inform people about how devasting the explosion was by viewing the explosion radius on a location they are intimate with.\r\n    </CalciteP>\r\n\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                open={openUpdatesModal}\r\n                onRequestClose={noViewUpdatesModalHandler}\r\n                appElement={document.body}\r\n                overlayStyle={docsModalZIndex}\r\n                title=\"Future Updates\"\r\n\r\n\r\n            >\r\n\r\n                <CalciteLi>\r\n                    Ability to change the map, rather than sticking with one\r\n              </CalciteLi>\r\n\r\n                <CalciteLi>\r\n                    Allow the user to put an address instead of Longitude / Latitude\r\n              </CalciteLi>\r\n\r\n\r\n                <CalciteLi>\r\n                    No re-render of map when choosing a button to click\r\n              </CalciteLi>\r\n\r\n\r\n                <CalciteLi>\r\n                    rearrange the web page, make a more elegant design\r\n              </CalciteLi>\r\n\r\n\r\n                <CalciteLi>\r\n                    Handle error cases\r\n              </CalciteLi>\r\n\r\n\r\n\r\n            </Modal>\r\n\r\n\r\n\r\n            <SubNav legacy={true} blue={true}>\r\n                <SubNavTitle>ArcGIS Beirut Application</SubNavTitle>\r\n                <SubNavList>\r\n                    <SubNavLink active href=\"#\">\r\n                        Map\r\n            </SubNavLink>\r\n                    <SubNavLink onClick={viewInfoModalHandler}>What is This?</SubNavLink>\r\n                    <SubNavLink onClick={viewUpdatesModalHandler}>Future Updates</SubNavLink>\r\n                </SubNavList>\r\n            </SubNav>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useState } from 'react';\nimport WebMapView from './components/WebMapView/WebMapView';\nimport InputCoordinates from './components/InputCoordinates/InputCoordinates';\nimport DistanceButtons from './components/DistanceButtons/DistanceButtons';\nimport NavBar from './components/NavBar/NavBar.js';\n//bootstrap import\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\n\nconst App = (props) => {\n\n  const [coordinates, setCoordinates] = useState({longitude:-117.426392, latitude: 33.930370});\n\n  const[outerCircle, setOuterCircle] = useState(true);\n  const[middleCircle, setMiddleCircle] = useState(true);\n  const[innerCircle, setInnerCircle] = useState(true);\n\n  const viewOuterCircle = () =>{\n    setOuterCircle(!outerCircle);\n   \n  }\n\n  const viewMiddleCircle = () =>{\n    setMiddleCircle(!middleCircle);\n  }\n\n  const viewInnerCircle = () =>{\n    setInnerCircle(!innerCircle);\n  }\n\n  const setLocation = (longCoor, latCoor) =>{\n    setCoordinates(prevCoordinates => ({\n      longitude: longCoor,\n      latitude: latCoor\n    }));\n    \n  }\n\n\n  \n    return (\n      <div className=\"App\">\n  {/* NavBar component */}  \n<NavBar />\n\n  {/* Container of the map itself */}  \n<Container>\n      <WebMapView \n      isOuterCircle = {outerCircle} isMiddleCircle = {middleCircle} isInnerCircle = {innerCircle}\n      fullCoordinates = {coordinates}\n      />\n</Container>\n\n\n\n  {/* Container of both the input coordinates and the distance buttons*/}\n<Container className = \"interactiveContainer\">\n  <Row>\n      <Col md = \"6\">\n      <InputCoordinates setCoordinates = {setLocation} />\n      </Col>\n      <Col md = \"6\">\n      <DistanceButtons isOuterCircleMethod = {viewOuterCircle} isMiddleCircleMethod = {viewMiddleCircle}\n        isInnerCircleMethod = {viewInnerCircle}/>\n      </Col>\n  </Row>\n</Container>\n      </div>\n    );\n  \n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { setDefaultOptions } from 'esri-loader';\nimport registerServiceWorker from './registerServiceWorker';\nimport CalciteThemeProvider from 'calcite-react/CalciteThemeProvider';\n//Polyfill for IE\nimport 'react-app-polyfill/stable';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nsetDefaultOptions({ css: true });\n\nReactDOM.render(\n    <CalciteThemeProvider>\n    <App />\n  </CalciteThemeProvider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}